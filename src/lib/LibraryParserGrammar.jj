/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = false;}PARSER_BEGIN(LibParser)package lib;
public class LibParser{
  private boolean websitePresent;
  private boolean buildingPresent;
  private boolean timeOfYearPresent;
  private boolean staffPresent;
  private boolean bookCollectionPresent;
}PARSER_END(LibParser)

SKIP : 
{
 < SPACE: (" " | "\n" | "\t" | "\r")+ > 
}  

TOKEN : 
{
  < LIBRARY : "LIBRARY" >
| < STRING_WITH_SPACES : "\"" (< LETTER_OR_WHITESPACE >)+ "\"" >
| < STRING_WITH_SPACES_CAN_BE_EMPTY : "\"" (< LETTER_OR_WHITESPACE >)* "\"" >
| < WEBSITE_ENTRY : "\"" < WEB_PREFIX > (< WEB_ADDRESS_CHAR >)* "\"" >
| < WEBSITE : "WEBSITE" >
| < BUILDING : "BUILDING" >
| < BUILDING_NUMBER : (< DIGIT>){3} >
| < TIME_OF_YEAR : "TIMEOFYEAR" >
| < DAY : "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday" >
| < MONTH : "January" | "February" | "March" | "April" | "May" | "June" | "July" | "August" | "September" | "October" | "November" | "December" >
| < DAY_OF_MONTH : (< DIGIT>){1,2} >
| < DAY_OF_WEEK : "Mon" | "Tue" | "Wed" | "Thu" | "Fri" | "Sat" | "Sun" >
| < YEAR : (< DIGIT>){4} >
| < START : "START" >
| < END : "END" >
| < HOURS : "HOURS" >
| < TIME : (< DIGIT>){1,2} ":" (< DIGIT >){2}>
| < TO : "to" >
| < CLOSED : "CLOSED" >
| < STAFF : "STAFF" >
| < POSITION : "POSITION" >
| < EMAIL : "EMAIL" >
| < TYPE : "TYPE" >
| < TYPE_VALUE : "Full-time" | "Part-time">
| < RATE : "RATE" >
| < MONEY : <DOLLAR> | (< DOLLAR > "." (<CENTS >){0,1}) >
| < #DOLLAR : "$" (< DIGIT>)+ >
| < #CENTS : (< DIGIT>){2} >
| < BOOKCOLLECTION : "BOOKCOLLECTION" >
| < BOOK : "BOOK" >
| < TITLE : "TITLE" >
| < BOOK_TITLE : "\"" (< BOOK_TITLE_CHAR >)* "\"" >
| < AUTHOR : "AUTHOR" >
| < INITIAL : < CAPITAL_LETTER > <DOT > >
| < LB : "{" >
| < RB : "}" >
| < LP : "(" >
| < RP : ")" >
| < COLON: ":">
| < COMMA: ",">
| < QUOTE: "\"" >
| < DOT: "." >
| < AT : "@" >
| < AM_PM : "AM" | "PM" >
| < #DIGIT : ["0"-"9"] >
| < #LETTER : ["a"-"z","A"-"Z"] >
| < #CAPITAL_LETTER : ["A"-"Z"] >
| < #DIGIT_OR_LETTER : ["a"-"z","A"-"Z","0"-"9"] >
| < #DIGIT_OR_LETTER_OR_HYPHEN : ["a"-"z","A"-"Z","0"-"9","-"] >
| < #BOOK_TITLE_CHAR : ["a"-"z","A"-"Z","0"-"9","-",":"," "] >
| < #LETTER_OR_WHITESPACE : ["a"-"z","A"-"Z"," "] >
| < #WEB_ADDRESS_CHAR : ["a"-"z","A"-"Z","-","_","/","."] >
| < #WEB_PREFIX : "http://" | "https://" >
| < BOOK_ID : (< DIGIT_OR_LETTER >){8} >
| < NAME_PART : < CAPITAL_LETTER > (< LETTER >)* >
| < PART : (< DIGIT_OR_LETTER >)+ >
| < PART_WITH_HYPHEN : (< DIGIT_OR_LETTER_OR_HYPHEN >)+ >
| < EMAIL_ADDRESS : (<PART> | <BOOK_ID>)(< DOT >(<PART> | <BOOK_ID>))* <AT> (<PART> | <BOOK_ID> |< PART_WITH_HYPHEN >)(< DOT >(<PART> | <BOOK_ID> |< PART_WITH_HYPHEN >))* >
}

void Library() : {}{
  <LIBRARY ><STRING_WITH_SPACES ><LB >
  ( Website() {
    if (websitePresent){		throw new ParseException("Duplicate entry WEBSITE on line "+token.beginLine);
  	} else {  	  websitePresent = true;
  	}
  } | Building() {
    if (buildingPresent){
		throw new ParseException("Duplicate entry BUILDING on line "+token.beginLine);
  	} else {
  	  buildingPresent = true;
  	}
  } | TimeOfYear() {
  	timeOfYearPresent = true;
  } | Staff(false, false, false, false) {
  	staffPresent = true;
  } | BookCollection() {
  	bookCollectionPresent = true;
  }
  )*
  <RB >< EOF > 
  {
      if (!websitePresent) {throw new ParseException("No WEBSITE entry found");}
      if (!buildingPresent) {throw new ParseException("No BUILDING entry found");} 
      if (!timeOfYearPresent) {throw new ParseException("No TIMEOFYEAR entry found");} 
      if (!staffPresent) {throw new ParseException("No STAFF entry found");} 
      if (!bookCollectionPresent) {throw new ParseException("No BOOKCOLLECTION entry found");} 
  }}

void BookCollection() :{}
{
	< BOOKCOLLECTION ><STRING_WITH_SPACES ><LB >BookList()< RB >
} 

void Staff(boolean positionPresent, boolean typePresent, boolean ratePresent, boolean emailPresent) :{}
{
	<STAFF ><STRING_WITH_SPACES ><LB >
  	(Position() {
	    if (positionPresent){
			throw new ParseException("Duplicate entry POSITION on line "+token.beginLine);
	  	} else {
	  	  positionPresent = true;
	  	}
	  } | Type() {
	    if (typePresent){
			throw new ParseException("Duplicate entry TYPE on line "+token.beginLine);
	  	} else {
	  	  typePresent = true;
	  	}
	  } | Rate() {
	    if (ratePresent){
			throw new ParseException("Duplicate entry RATE on line "+token.beginLine);
	  	} else {
	  	  ratePresent = true;
	  	}
	  } | Email() {
	  	emailPresent = true;
	  } )*
  	<RB >
  	{
      if (!positionPresent) {throw new ParseException("No POSITION entry for staff member found on line "+token.beginLine);}
      if (!typePresent) {throw new ParseException("No TYPE entry for staff member found on line "+token.beginLine);} 
      if (!ratePresent) {throw new ParseException("No RATE entry found on line "+token.beginLine);} 
      if (!emailPresent) {throw new ParseException("No EMAIL entry found on line "+token.beginLine);} 
  	}
} 

void Rate() :{}
{
	<RATE ><MONEY >
}

void Type() :{}
{
	< TYPE ><TYPE_VALUE >
}

void Position() :{}
{
	< POSITION >(<STRING_WITH_SPACES> | <STRING_WITH_SPACES_CAN_BE_EMPTY> )
}

void TimeOfYear() :{}
{
	<TIME_OF_YEAR ><STRING_WITH_SPACES ><LB ><START ><DAY ><COMMA ><DAY_OF_MONTH ><MONTH ><YEAR >
  	<END ><DAY ><COMMA ><DAY_OF_MONTH ><MONTH ><YEAR >HoursList()< RB >
} 

void Building() :{}
{
	<BUILDING ><BUILDING_NUMBER >
}  

void Website() :{}
{
	<WEBSITE ><WEBSITE_ENTRY >
}  

void Author() :{}
{	<AUTHOR >< QUOTE >< NAME_PART ><COMMA >(< NAME_PART > | < INITIAL >)+< QUOTE >
}  

void BookList() :{}
{
  (Book(false,false))+
}

void Book(boolean titlePresent, boolean authorPresent) :{}
{
  < BOOK ><BOOK_ID ><LB >
  ( BookTitle() {
    if (titlePresent){
		throw new ParseException("Duplicate entry TITLE on line "+token.beginLine);
  	} else {
  	  titlePresent = true;
  	}
  } | Author() {
  	authorPresent = true;
  } )*
  < RB >
	{
      if (!titlePresent) {throw new ParseException("No TITLE entry for book found on line "+token.beginLine);}
      if (!authorPresent) {throw new ParseException("No AUTHOR entry for book found on line "+token.beginLine);} 
  	}
}

void BookTitle() :{} 
{
	<TITLE >(<BOOK_TITLE > | <STRING_WITH_SPACES_CAN_BE_EMPTY>)
}

void Email() :{}{	//< EMAIL >LocalPart()< AT >DomainPart()
	<EMAIL><EMAIL_ADDRESS>
}

//void DomainPart() :{}//{//	<PART> | <BOOK_ID> | <NAME_PART> | <LOCAL_PART> | <DOMAIN_PART>//}////void LocalPart() :{}//{//  (<PART > | < BOOK_ID > | <NAME_PART> | <LOCAL_PART> )//}

void DayList() :{}{
  < DAY_OF_WEEK >(<COMMA ><DAY_OF_WEEK >)*}

void HoursList() :{}
{
  (<HOURS >DayList()<LP >TimePeriod()< RP >)+}

void TimePeriod() :{}
{	(< TIME ><AM_PM ><TO ><TIME ><AM_PM >) | < CLOSED >
}
