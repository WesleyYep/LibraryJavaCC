/* Generated By:JavaCC: Do not edit this line. LibParser.java */
package lib;
public class LibParser implements LibParserConstants {
  private boolean websitePresent;
  private boolean buildingPresent;
  private boolean timeOfYearPresent;
  private boolean staffPresent;
  private boolean bookCollectionPresent;

  final public void Library() throws ParseException {
    jj_consume_token(LIBRARY);
    jj_consume_token(STRING_WITH_SPACES);
    jj_consume_token(LB);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WEBSITE:
      case BUILDING:
      case TIME_OF_YEAR:
      case STAFF:
      case BOOKCOLLECTION:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WEBSITE:
        Website();
    if (websitePresent){
                {if (true) throw new ParseException("Duplicate entry WEBSITE on line "+token.beginLine);}
        } else {
          websitePresent = true;
        }
        break;
      case BUILDING:
        Building();
    if (buildingPresent){
                {if (true) throw new ParseException("Duplicate entry BUILDING on line "+token.beginLine);}
        } else {
          buildingPresent = true;
        }
        break;
      case TIME_OF_YEAR:
        TimeOfYear();
        timeOfYearPresent = true;
        break;
      case STAFF:
        Staff(false, false, false, false);
        staffPresent = true;
        break;
      case BOOKCOLLECTION:
        BookCollection();
        bookCollectionPresent = true;
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RB);
    jj_consume_token(0);
      if (!websitePresent) {{if (true) throw new ParseException("No WEBSITE entry found");}}
      if (!buildingPresent) {{if (true) throw new ParseException("No BUILDING entry found");}}
      if (!timeOfYearPresent) {{if (true) throw new ParseException("No TIMEOFYEAR entry found");}}
      if (!staffPresent) {{if (true) throw new ParseException("No STAFF entry found");}}
      if (!bookCollectionPresent) {{if (true) throw new ParseException("No BOOKCOLLECTION entry found");}}
  }

  final public void BookCollection() throws ParseException {
    jj_consume_token(BOOKCOLLECTION);
    jj_consume_token(STRING_WITH_SPACES);
    jj_consume_token(LB);
    BookList();
    jj_consume_token(RB);
  }

  final public void Staff(boolean positionPresent, boolean typePresent, boolean ratePresent, boolean emailPresent) throws ParseException {
    jj_consume_token(STAFF);
    jj_consume_token(STRING_WITH_SPACES);
    jj_consume_token(LB);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POSITION:
      case EMAIL:
      case TYPE:
      case RATE:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POSITION:
        Position();
            if (positionPresent){
                        {if (true) throw new ParseException("Duplicate entry POSITION on line "+token.beginLine);}
                } else {
                  positionPresent = true;
                }
        break;
      case TYPE:
        Type();
            if (typePresent){
                        {if (true) throw new ParseException("Duplicate entry TYPE on line "+token.beginLine);}
                } else {
                  typePresent = true;
                }
        break;
      case RATE:
        Rate();
            if (ratePresent){
                        {if (true) throw new ParseException("Duplicate entry RATE on line "+token.beginLine);}
                } else {
                  ratePresent = true;
                }
        break;
      case EMAIL:
        Email();
                emailPresent = true;
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RB);
      if (!positionPresent) {{if (true) throw new ParseException("No POSITION entry for staff member found on line "+token.beginLine);}}
      if (!typePresent) {{if (true) throw new ParseException("No TYPE entry for staff member found on line "+token.beginLine);}}
      if (!ratePresent) {{if (true) throw new ParseException("No RATE entry found on line "+token.beginLine);}}
      if (!emailPresent) {{if (true) throw new ParseException("No EMAIL entry found on line "+token.beginLine);}}
  }

  final public void Rate() throws ParseException {
    jj_consume_token(RATE);
    jj_consume_token(MONEY);
  }

  final public void Type() throws ParseException {
    jj_consume_token(TYPE);
    jj_consume_token(TYPE_VALUE);
  }

  final public void Position() throws ParseException {
    jj_consume_token(POSITION);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_WITH_SPACES:
      jj_consume_token(STRING_WITH_SPACES);
      break;
    case STRING_WITH_SPACES_CAN_BE_EMPTY:
      jj_consume_token(STRING_WITH_SPACES_CAN_BE_EMPTY);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TimeOfYear() throws ParseException {
    jj_consume_token(TIME_OF_YEAR);
    jj_consume_token(STRING_WITH_SPACES);
    jj_consume_token(LB);
    jj_consume_token(START);
    jj_consume_token(DAY);
    jj_consume_token(COMMA);
    jj_consume_token(DAY_OF_MONTH);
    jj_consume_token(MONTH);
    jj_consume_token(YEAR);
    jj_consume_token(END);
    jj_consume_token(DAY);
    jj_consume_token(COMMA);
    jj_consume_token(DAY_OF_MONTH);
    jj_consume_token(MONTH);
    jj_consume_token(YEAR);
    HoursList();
    jj_consume_token(RB);
  }

  final public void Building() throws ParseException {
    jj_consume_token(BUILDING);
    jj_consume_token(BUILDING_NUMBER);
  }

  final public void Website() throws ParseException {
    jj_consume_token(WEBSITE);
    jj_consume_token(WEBSITE_ENTRY);
  }

  final public void Author() throws ParseException {
    jj_consume_token(AUTHOR);
    jj_consume_token(QUOTE);
    jj_consume_token(NAME_PART);
    jj_consume_token(COMMA);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME_PART:
        jj_consume_token(NAME_PART);
        break;
      case INITIAL:
        jj_consume_token(INITIAL);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INITIAL:
      case NAME_PART:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
    }
    jj_consume_token(QUOTE);
  }

  final public void BookList() throws ParseException {
    label_4:
    while (true) {
      Book(false,false);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOK:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
    }
  }

  final public void Book(boolean titlePresent, boolean authorPresent) throws ParseException {
    jj_consume_token(BOOK);
    jj_consume_token(BOOK_ID);
    jj_consume_token(LB);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TITLE:
      case AUTHOR:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TITLE:
        BookTitle();
    if (titlePresent){
                {if (true) throw new ParseException("Duplicate entry TITLE on line "+token.beginLine);}
        } else {
          titlePresent = true;
        }
        break;
      case AUTHOR:
        Author();
        authorPresent = true;
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RB);
      if (!titlePresent) {{if (true) throw new ParseException("No TITLE entry for book found on line "+token.beginLine);}}
      if (!authorPresent) {{if (true) throw new ParseException("No AUTHOR entry for book found on line "+token.beginLine);}}
  }

  final public void BookTitle() throws ParseException {
    jj_consume_token(TITLE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOK_TITLE:
      jj_consume_token(BOOK_TITLE);
      break;
    case STRING_WITH_SPACES_CAN_BE_EMPTY:
      jj_consume_token(STRING_WITH_SPACES_CAN_BE_EMPTY);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Email() throws ParseException {
    jj_consume_token(EMAIL);
    jj_consume_token(EMAIL_ADDRESS);
  }

//void DomainPart() :{}//{//	<PART> | <BOOK_ID> | <NAME_PART> | <LOCAL_PART> | <DOMAIN_PART>//}////void LocalPart() :{}//{//  (<PART > | < BOOK_ID > | <NAME_PART> | <LOCAL_PART> )//}
  final public void DayList() throws ParseException {
    jj_consume_token(DAY_OF_WEEK);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      jj_consume_token(DAY_OF_WEEK);
    }
  }

  final public void HoursList() throws ParseException {
    label_7:
    while (true) {
      jj_consume_token(HOURS);
      DayList();
      jj_consume_token(LP);
      TimePeriod();
      jj_consume_token(RP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HOURS:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_7;
      }
    }
  }

  final public void TimePeriod() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIME:
      jj_consume_token(TIME);
      jj_consume_token(AM_PM);
      jj_consume_token(TO);
      jj_consume_token(TIME);
      jj_consume_token(AM_PM);
      break;
    case CLOSED:
      jj_consume_token(CLOSED);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /** Generated Token Manager. */
  public LibParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x402002c0,0x402002c0,0x5c00000,0x5c00000,0x18,0x0,0x0,0x80000000,0x0,0x0,0x10,0x0,0x20000,0x140000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x1000008,0x1000008,0x0,0x5,0x5,0x2,0x200,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public LibParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public LibParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LibParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public LibParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LibParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public LibParser(LibParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(LibParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[60];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 60; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
