/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = false;}PARSER_BEGIN(LibraryParser)package library;
public class LibraryParser{
  private boolean isMale;
  private String name;
}PARSER_END(LibraryParser)

SKIP : 
{
 < SPACE: (" " | "\n" | "\t" | "\r")+ > 
}  

TOKEN : 
{
  < LIBRARY : "LIBRARY" >
| < STRING_WITH_SPACES : "\"" (< LETTER_OR_WHITESPACE >)+ "\"" >
| < WEBSITE_ENTRY : "\"" < WEB_PREFIX > (< WEB_ADDRESS_CHAR >)+ "\"" >
| < WEBSITE : "WEBSITE" >
| < BUILDING : "BUILDING" >
| < BUILDING_NUMBER : (< DIGIT>){3} >
| < TIME_OF_YEAR : "TIMEOFYEAR" >
| < DAY : "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday" >
| < MONTH : "January" | "February" | "March" | "April" | "May" | "June" | "July" | "August" | "September" | "October" | "November" | "December" >
| < DAY_OF_MONTH : (< DIGIT>){1,2} >
| < DAY_OF_WEEK : "Mon" | "Tue" | "Wed" | "Thu" | "Fri" | "Sat" | "Sun" >
| < YEAR : (< DIGIT>){4} >
| < START : "START" >
| < END : "END" >
| < HOURS : "HOURS" >
| < TIME : (< DIGIT>){1,2} ":" (< DIGIT >){2}>
| < TO : "to" >
| < CLOSED : "CLOSED" >
| < STAFF : "STAFF" >
| < POSITION : "POSITION" >
| < EMAIL : "EMAIL" >
| < TYPE : "TYPE" >
| < TYPE_VALUE : "Full-time" | "Part-time">
| < RATE : "RATE" >
| < MONEY : < DOLLAR > "." (<CENTS >){0,1} >
| < #DOLLAR : "$" (< DIGIT>)+ >
| < #CENTS : (< DIGIT>){1,2} >
| < BOOKCOLLECTION : "BOOKCOLLECTION" >
| < BOOK : "BOOK" >
| < TITLE : "TITLE" >
| < AUTHOR : "AUTHOR" >
| < LB : "{" >
| < RB : "}" >
| < LP : "(" >
| < RP : ")" >
| < COLON: ":">
| < COMMA: ",">
| < DOT: "." >
| < AT : "@" >
| < AM_PM : "AM" | "PM" >
| < #DIGIT : ["0"-"9"] >
| < #LETTER : ["a"-"z","A"-"Z"] >
| < #DIGIT_OR_LETTER : ["a"-"z","A"-"Z","0"-"9"] >
| < #DIGIT_OR_LETTER_OR_HYPHEN : ["a"-"z","A"-"Z","0"-"9","-"] >
| < #LETTER_OR_WHITESPACE : ["a"-"z","A"-"Z"," "] >
| < #WEB_ADDRESS_CHAR : ["a"-"z","A"-"Z","-","_","/","."] >
| < #WEB_PREFIX : "http://" | "https://" >
| < BOOK_ID : (< DIGIT_OR_LETTER >){8} >
| < PART : (< DIGIT_OR_LETTER >)+ >
| < PART_WITH_HYPHEN : (< DIGIT_OR_LETTER_OR_HYPHEN >)+ >
}

void Library() : {}{
  <LIBRARY ><STRING_WITH_SPACES ><LB ><WEBSITE ><WEBSITE_ENTRY ><BUILDING ><BUILDING_NUMBER >
  <TIME_OF_YEAR ><STRING_WITH_SPACES ><LB ><START ><DAY ><COMMA ><DAY_OF_MONTH ><MONTH ><YEAR >
  <END ><DAY ><COMMA ><DAY_OF_MONTH ><MONTH ><YEAR >HoursList()< RB ><STAFF ><STRING_WITH_SPACES ><LB >
  < POSITION ><STRING_WITH_SPACES >EmailList()< TYPE ><TYPE_VALUE ><RATE ><MONEY ><RB >
  < BOOKCOLLECTION ><STRING_WITH_SPACES ><LB >BookList()}

void BookList() :{}
{
  (Book())+
}

void Book() :{}
{
  < BOOK ><BOOK_ID ><LB >
}


void EmailList() :{}
{
  (Email())*
}

void Email() :{}{	< EMAIL >LocalPart()< AT >DomainPart()
}

void LocalPart() :{}
{
  Part() (< DOT >Part())*
}

void DomainPart() :{}
{
  (Part()|< PART_WITH_HYPHEN >)(< DOT >(Part()|< PART_WITH_HYPHEN >))*
}

void Part() :{}
{	(<PART > | < BOOK_ID >)
}

void DayList() :{}{
  < DAY_OF_WEEK >(<COMMA ><DAY_OF_WEEK >)*}

void HoursList() :{}
{
  (<HOURS >DayList()<LP >TimePeriod()< RP >)+}

void TimePeriod() :{}
{	(< TIME ><AM_PM ><TO ><TIME ><AM_PM >) | < CLOSED >
}


//int People() : {int personCount = 0; }//{//  (Person() {personCount++;})+ < EOF > {return personCount;}//}

//void Person() : { }//{//  < PERSON > <LP > (< MALE > {isMale = true;} | < FEMALE > {isMale = false;}  ) < RP > <NAME >  { name = token.image; } <LB >//	(  LOOKAHEAD(TitleList()) TitleList()//	 | LOOKAHEAD(PhoneList()) PhoneList()//	 | Address() )*//  < RB >//}

//void TitleList() : { }//{//	Title(true) ( < COMMA > Title(true) )* < SEMI >//}////void PhoneList() :  { }//{//  Phone() (< COMMA > Phone())* < SEMI >//}////void Phone() : { }//{//  <DIGIT_3> | <PHONE_7>  | <PHONE_10>  //}////void Address() : { }//{//	Part() ( (< COMMA >)? Part() )* < SEMI >//}////void Part() : { }//{//  < WORD> | < NUMBER> | <DIGIT_3> | Title(false) | < PERSON > | < MALE > | < FEMALE >//}////void Title(boolean checkingTitle) : { }//{//    < DR>//    | ( < MADAM> | < MISS> | < MRS> | < MS> )//    {//      if (isMale & checkingTitle)//      {//		throw new ParseException(name +" is not female, you cannot call him "+token.image+" on line "+token.beginLine);//      } //    }//    | ( < MR > | < SIR > )//    {//      if (!isMale & checkingTitle)//      {//		throw new ParseException(name +" is not female, you cannot call him "+token.image+" on line "+token.beginLine);//      } //    }
//}
